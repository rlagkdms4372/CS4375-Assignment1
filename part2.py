# -*- coding: utf-8 -*-
"""part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1joZLfszNfo3Q8Dw1Qk3r2zReLLPc26Ny
"""

# The libraries that I used for the part 2
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import SGDRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

# Bring out the dataset 
mpg = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data-original", sep='\s+', header = None)

# Rename the Column from the dataset, and delete the last column which is the name of car
mpg.columns = ['mpg', 'cylinders','displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', 'car_name']
mpg = mpg.drop(['car_name'], axis = 1)
# Standarization of dataset
scaler=StandardScaler()
scaler.fit(mpg)
mpg = scaler.transform(mpg)
# Rename the Column
mpg = pd.DataFrame(mpg,columns=['mpg', 'cylinders','displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin'])

# Drop the not suitable columns(Discrete Variables)
mpg = mpg.drop(['origin', 'cylinders', 'model_year'], axis = 1)

# Check out the number of NAs
mpg.isna().sum()

# Remove null or NA values
mpg.dropna(inplace = True)
# Remove any redundant rows
mpg.drop_duplicates(inplace = True)

# Find the information about the dataset, and check the NULLs
mpg.info()

# The target of this dataset is MPG, so Y is MPG, and X is the others except for Y
Y = mpg['mpg']
X = mpg.drop(['mpg'], axis=1)

# Split the dataset 80(train) : 20(test)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)

# Change the train and test set into dataframe
x_train = pd.DataFrame(X_train)
y_train = pd.DataFrame(Y_train)
x_test = pd.DataFrame(X_test)
y_test = pd.DataFrame(Y_test)

# add the column names axis which is for constant
axis = [1] * len(x_train)
x_train.insert(0, 'axis', axis)
axis = [1] * len(x_test)
x_test.insert(0, 'axis', axis)

# Doing the linear regression with SGDRegressor
model = SGDRegressor(alpha=0.01, max_iter = 10000)
model.fit(x_train, y_train)

# model evaluation for training set
y_train_predict = model.predict(x_train)
mse = (mean_squared_error(y_train, y_train_predict))
r2 = r2_score(y_train, y_train_predict)

print("--------------------------------------")
print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(round(mse,5)))
print('R2 score is {}'.format(round(r2,5)))
print("--------------------------------------")
print("\n")

# model evaluation for test set
y_test_predict = model.predict(x_test)
mse = (mean_squared_error(y_test, y_test_predict))
r2 = r2_score(y_test, y_test_predict)

print("--------------------------------------")
print("The model performance for test set")
print("--------------------------------------")
print('MSE is {}'.format(round(mse,5)))
print('R2 score is {}'.format(round(r2,5)))
print("--------------------------------------")
print("\n")


# Doing the linear regression with LinearRegression()
linear_regression = LinearRegression()
linear_regression.fit(x_train, y_train)

# model evaluation for training set
y_train_predict = linear_regression.predict(x_train)
mse = mean_squared_error(y_train, y_train_predict)
r2 = r2_score(y_train, y_train_predict)

print("--------------------------------------")
print("The model performance for training set")
print("--------------------------------------")
print('MSE is {}'.format(round(mse,5)))
print('R2 score is {}'.format(round(r2,5)))
print("--------------------------------------")
print("\n")

# model evaluation for testing set
y_test_predict = linear_regression.predict(X_test)
mse = mean_squared_error(Y_test, y_test_predict)
r2 = r2_score(Y_test, y_test_predict)
print("--------------------------------------")
print("The model performance for testing set")
print("--------------------------------------")
print('MSE is {}'.format(round(mse,5)))
print('R2 score is {}'.format(round(r2,5)))
print("--------------------------------------")